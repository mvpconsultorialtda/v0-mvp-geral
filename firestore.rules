rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isUserAuthenticated() {
      return request.auth != null;
    }

    function getRole(listId) {
      return get(/databases/$(database)/documents/lists/$(listId)).data.members[request.auth.uid];
    }

    function isOwner(listId) {
      let list = get(/databases/$(database)/documents/lists/$(listId));
      return isUserAuthenticated() && request.auth.uid == list.data.ownerId;
    }

    match /lists/{listId} {
      allow read: if isUserAuthenticated() && (isOwner(listId) || request.auth.uid in resource.data.members);
      allow create: if isUserAuthenticated() &&
                      request.auth.uid == request.resource.data.ownerId &&
                      'name' in request.resource.data &&
                      request.resource.data.name is string &&
                      request.resource.data.name.size() > 0 &&
                      'members' in request.resource.data &&
                      request.resource.data.members.size() == 0;
      allow update: if isUserAuthenticated() && (
                      (isOwner(listId)) ||
                      (getRole(listId) == 'editor' && request.resource.data.ownerId == resource.data.ownerId)
                    );
      allow delete: if isOwner(listId);

      match /tasks/{taskId} {
        allow read: if isUserAuthenticated() && (isOwner(listId) || getRole(listId) in ['editor', 'viewer']);
        allow create: if isUserAuthenticated() && (isOwner(listId) || getRole(listId) == 'editor') &&
                         'text' in request.resource.data &&
                         request.resource.data.text is string &&
                         request.resource.data.text.size() > 0 &&
                         'completed' in request.resource.data &&
                         request.resource.data.completed == false;
        allow update: if isUserAuthenticated() && (isOwner(listId) || getRole(listId) == 'editor');
        allow delete: if isUserAuthenticated() && (isOwner(listId) || getRole(listId) == 'editor');

        match /comments/{commentId} {
          allow read: if isUserAuthenticated() && (isOwner(listId) || getRole(listId) in ['editor', 'viewer']);
          allow create: if isUserAuthenticated() &&
                           (isOwner(listId) || getRole(listId) in ['editor', 'viewer']) &&
                           request.resource.data.authorId == request.auth.uid &&
                           request.resource.data.text is string &&
                           request.resource.data.text.size() > 0;
          allow delete: if isUserAuthenticated() &&
                           (isOwner(listId) || getRole(listId) == 'editor' || resource.data.authorId == request.auth.uid);
          allow update: if false;
        }

        match /attachments/{attachmentId} {
          allow read: if isUserAuthenticated() && (isOwner(listId) || getRole(listId) in ['editor', 'viewer']);
          allow create: if isUserAuthenticated() &&
                           (isOwner(listId) || getRole(listId) == 'editor') &&
                           request.resource.data.uploaderId == request.auth.uid;
          allow delete: if isUserAuthenticated() &&
                           (isOwner(listId) || getRole(listId) == 'editor');
          allow update: if false;
        }
      }
    }

    match /users/{userId} {
      allow read: if isUserAuthenticated();
      allow write: if isUserAuthenticated() && request.auth.uid == userId;
    }
  }
}
