rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isUserAuthenticated() {
      return request.auth != null;
    }

    // New function to check role-based membership
    function getRole(listId) {
      return get(/databases/$(database)/documents/lists/$(listId)).data.members[request.auth.uid];
    }

    function isOwner(listId) {
      let list = get(/databases/$(database)/documents/lists/$(listId));
      return isUserAuthenticated() && request.auth.uid == list.data.ownerId;
    }

    match /lists/{listId} {
      // Read allowed for owner and members (editors and viewers)
      allow read: if isUserAuthenticated() && (isOwner(listId) || request.auth.uid in resource.data.members);

      // Create allowed only for the user who will be the owner
      allow create: if isUserAuthenticated() &&
                      request.auth.uid == request.resource.data.ownerId &&
                      'name' in request.resource.data &&
                      request.resource.data.name is string &&
                      request.resource.data.name.size() > 0 &&
                      'members' in request.resource.data &&
                      request.resource.data.members.size() == 0; // Initialize with no members

      // Update allowed for the owner and editors
      // Owner can change anything. Editors can change anything except the ownerId.
      allow update: if isUserAuthenticated() && (
                      (isOwner(listId)) ||
                      (getRole(listId) == 'editor' && request.resource.data.ownerId == resource.data.ownerId)
                    );

      // Delete allowed only for the owner
      allow delete: if isOwner(listId);

      match /tasks/{taskId} {
        // Read tasks allowed for owner and members
        allow read: if isUserAuthenticated() && (isOwner(listId) || getRole(listId) in ['editor', 'viewer']);

        // Create tasks allowed for owner and editors
        allow create: if isUserAuthenticated() && (isOwner(listId) || getRole(listId) == 'editor') &&
                         'text' in request.resource.data &&
                         request.resource.data.text is string &&
                         request.resource.data.text.size() > 0 &&
                         'completed' in request.resource.data &&
                         request.resource.data.completed == false;

        // Update tasks allowed for owner and editors
        allow update: if isUserAuthenticated() && (isOwner(listId) || getRole(listId) == 'editor') &&
                         ('text' in request.resource.data || 'completed' in request.resource.data);

        // Delete tasks allowed for owner and editors
        allow delete: if isUserAuthenticated() && (isOwner(listId) || getRole(listId) == 'editor');
      }
    }

    match /users/{userId} {
      // Any authenticated user can read profiles for sharing features.
      allow read: if isUserAuthenticated();

      // A user can only modify their own profile.
      allow write: if isUserAuthenticated() && request.auth.uid == userId;
    }
  }
}
